<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = room_width/2
switch(sprite_index)
{
    case spr_btnPlay:
    y = room_height/2;
    break;
    case spr_btnHighscore:
    y = room_height/2 + sprite_height;
    break;
    case spr_btnOptions:
    y = room_height/2 + sprite_height*2;
    break;
    case spr_btnHelp:
    y = room_height/2 + sprite_height*3;
    break;
    case spr_btnCredits:
    y = room_height/2 + sprite_height*4;
    break;
    case spr_btnQuit:
    y = room_height/2 + sprite_height*5;
    break;
    case spr_btnBack:
    x = 400 + sprite_width/2;
    if(global.state != global.upgrade)
        y = room_height - sprite_height/2;
    else
        y = room_height - 400;
    break;
    //case spr_btnClear:
    //x = 1200;
    //y = room_height - sprite_height/2;
    //break;
    case spr_btnResume:
    y = room_height/2;
    break;
    case spr_btnRestart:
    y = room_height/2+sprite_height;
    break;
    case spr_btnUpgrades:
    y = room_height/2+sprite_height*2;
    break;
    case spr_btnMainMenu:
    y = room_height/2+sprite_height*3;
    break;
    case spr_btnEnter:
    x = 709;
    y = 860;
    break;
    case spr_btnExit:
    x = 1731 - sprite_width;
    y = 860;
    break;
    case spr_btnControls:
    x = 1200 - sprite_width/2;
    y = room_height - 100;
    break;
    case spr_btnSave:
    x = 1200 - sprite_width/2;
    y = room_height - 100;
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(image_index == 2)
{
    image_index = 0;
    if(global.state != -1)
    {
        switch(sprite_index)
        {
            //Play
            case spr_btnPlay:
            global.state = global.play;
            obj_Control.restart = true;
            room_goto(game);
            break;
            //HighScore
            case spr_btnHighscore:
            global.state = global.high_score;
            room_goto(highscore);
            break;
            //Options
            case spr_btnOptions:
            global.state = global.option;
            room_goto(options);
            break;
            //Help
            case spr_btnHelp:
            global.state = global.help;
            room_goto(Help);
            break;
            //Credits
            case spr_btnCredits:
            room_goto(Credits);
            break;
            //Quit
            case spr_btnQuit:
            game_end();
            break;
            //Controls
            case spr_btnControls:
            global.state = global.keybind;
            room_goto(keybinding);
            break;
            //Back
            case spr_btnBack:
            if (global.state == global.keybind)
            {
                global.state = global.option;
                room_goto(options);
                
                for (i = 0; i &lt; 8; i++)
                {
                    obj_Control.arrTempKeys[i] = obj_Control.arrControlKeys[i];
                }
                
                break;
            }
            //MainMenu
            case spr_btnMainMenu:
            if(room != upgrades)
            {
                global.state = global.main_menu;
                room_goto(mainmenu);
            }
            else
            {
                global.state = global.pause;
                room_goto(paused);
            }
            break;
            //Resume
            case spr_btnResume:
            global.state = global.play;
            room_goto(game);
            break;
            //Restart
            case spr_btnRestart:
            global.state = global.play;
            obj_Control.restart = true;
            room_goto(game);
            break;
            //Upgrades
            case spr_btnUpgrades:
            global.state = global.upgrade;
            room_goto(upgrades);
            break;
            
            case spr_btnEnter:
            if (global.state == global.gameOver)
            {
                obj_Control.upBtnCount = 4;
            
                for (i = 0; i &lt; obj_Control.players; i++)
                {
                    if(real(obj_Control.hsTotalScore[i]) &lt; obj_Control.score)
                    {
                        tempCount = 0;
                        for (j = i; j &lt; obj_Control.players; j++)
                        {
                            tempNameArr[tempCount] = obj_Control.hsName[j];
                            tempScoreArr[tempCount] = obj_Control.hsTotalScore[j];
                            tempAccuracyArr[tempCount] = obj_Control.hsAccuracy[j];
                            tempZombiesArr[tempCount] = obj_Control.hsZombiesKilled[j];
                            tempBuildingsArr[tempCount] = obj_Control.hsBuildings[j];
                            tempDaysArr[tempCount] = obj_Control.hsDays[j];
                            
                            tempCount++;
                        }
                        
                        count = i+1;
                        for (k = 0; k &lt; tempCount; k++)
                        {
                            obj_Control.hsName[count] = tempNameArr[k];
                            obj_Control.hsTotalScore[count] = tempScoreArr[k];
                            obj_Control.hsAccuracy[count] = tempAccuracyArr[k];
                            obj_Control.hsZombiesKilled[count] = tempZombiesArr[k];
                            obj_Control.hsBuildings[count] = tempBuildingsArr[k];
                            obj_Control.hsDays[count] = tempDaysArr[k];
                            
                            count++;
                        }
                        
                        string_accuracy = "";
                        if (obj_Control.shots_fired == 0)
                        {
                            string_accuracy = "0";
                        }
                        else
                            string_accuracy = string(obj_Control.shots_hit/obj_Control.shots_fired);
                        
                        obj_Control.hsName[i] = obj_TextField.string_keyboard;
                        obj_Control.hsTotalScore[i] = obj_Control.score;
                        obj_Control.hsAccuracy[i] = string_accuracy;
                        obj_Control.hsZombiesKilled[i] = obj_Control.zombies_killed;
                        obj_Control.hsBuildings[i] = obj_Control.buildings;
                        obj_Control.hsDays[i] = obj_Control.roundNum;
                        
                        break;
                    }
                }
                
                script_execute(SaveHighscore);
                global.state = global.high_score;
                room_goto(highscore);
            }
            break;
            
            //Save controls
            case spr_btnSave:
            
            ini_open("controls.ini");
            for (i = 0; i &lt; 8; i++)
            {
                obj_Control.arrControlKeys[i] = obj_Control.arrTempKeys[i];
                ini_write_string("keys", obj_Control.arrFileName[i], obj_Control.arrControlKeys[i]); 
            }
            ini_close();
            
            break;
            
            //Exit from Game
            case spr_btnExit:
            if(global.state == global.gameOver)
            {
                global.state = global.high_score;
                room_goto(highscore);
            }
            break;
            
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.state != -1)
{
    image_index = 2;
    audio_play_sound(snd_Click,1,false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>225,50</point>
    <point>226,226</point>
  </PhysicsShapePoints>
</object>
