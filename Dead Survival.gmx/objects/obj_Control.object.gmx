<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Game States
global.main_menu = 0;
global.character_select = 1;
global.pause = 2;
global.play = 3;
global.high_score = 4;
global.help = 5;
global.credits = 6;
global.option = 7;
global.keybind = 8;
global.upgrade = 9;
global.gameOver = 10;

global.state = -1;                                  //State of the game
top = 100;                                          //The top of screen depends on the height of the HUD
musicLevel = 1;
soundLevel = 1;
mute = false;
p_alarm1 = -1;
spriteLoad = false;
spriteLoadPass = false;

script_execute(GameInit);

hsClickX = false;
hsClickY = false;

upClickX = false;
upClickY = false;

upBtnCount = 4;

conClickX = false;
conClickY = false;

conNoNullValues = true;

conSelected = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>loading = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Timer For The Alarm</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>New Round Start</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//If there are any remaining crates leave them there
crateCreated = instance_number(obj_Crate);
zombiesCreated = 0;
num =0;
spawnZombie = true;
roundNum += 1;
zombies = irandom_range(8,15)*roundNum; 
zombiesRemaining = zombies;
crateNum = irandom_range(15,25);
alarm[1] = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(obj_Control))
{
    //In Game Initialization
    if(global.state == global.play)
    {
        
        cursor_sprite = spr_Crosshair;
        window_set_cursor(cr_none);
        //Play Music When Game Loading
        if(loading)
        {
            if(!audio_is_playing(snd_LoadingMusic))
                audio_play_music(snd_LoadingMusic,true);
        }
        else if(!audio_is_playing(snd_InGameToLoop))
            audio_play_music(snd_InGameToLoop,true);
            
        if(instance_exists(obj_House))
        {
            //Warning For Player if House Low HP
            if(obj_House.hp/h_maxHp &lt; 0.3 and zombiesRemaining &gt; 0)
            {
                if(alarm[2]&lt;= 0)
                {
                    alarm[2] = 60 * 2;
                }
            }
        }
        
        //When all zombies Die Round Over
        if(zombiesRemaining == 0)
        {
            if(alarm[1]&lt;0)
                alarm[1] = 8*60;
            
            if(!audio_is_playing(snd_InGameAtStart) and num &gt; 3 )
                audio_play_sound(snd_InGameAtStart,1,false);
        }
        
        //Created at the start of round
        if(crateCreated &lt; crateNum )
        {
            crate = instance_create(x,y,obj_Crate);
            crate.image_index = irandom(1);
            crate.image_xscale = scale;
            crate.image_yscale = scale;
        }
        
        //Stop the generation of Zombies
        /*
        Conditions: Necessary Number of Zombies for wave created, Currently Player not Playing Game and Room limit for Zombie reached 
        */
        if(zombiesCreated &gt;= zombies or global.state != global.play or instance_number(obj_Zombie) &gt;= 70 or buildMode or loading)
        {
            instance_deactivate_object(obj_ZombieSpawner);
        }
        else
        {
            instance_activate_object(obj_ZombieSpawner);
        }
        
        //Activate Build Mode
        if(keyboard_check_pressed(ord('F')))
        {
            if(view_visible[0] == true)
            {
                view_visible[0] = false;
                view_visible[2] = true;
                buildMode = true;
            }
            else
            {
                view_visible[0] = true;
                view_visible[2] = false;
                buildMode = false;
            }
        }
        
        //Build Mode
        if(buildMode)
        {
            obj_Zombie.active = false;

               if(keyboard_check_pressed(ord('1')))
                {
                    if(!instance_exists(obj_BuildMode))
                    {
                        build = instance_create(mouse_x,mouse_y,obj_BuildMode);
                    }
                    build.image_index = 0;
                }
                else if(keyboard_check_pressed(ord('2')))
                {
                    if(!instance_exists(obj_BuildMode))
                    {
                        build = instance_create(mouse_x,mouse_y,obj_BuildMode);
                    }
                    build.image_index = 1;
                }
        }
        else
        {
            obj_Zombie.active = true;
        }
        
        if(instance_exists(obj_Player) and instance_exists(obj_House))
        {
            if(obj_Player.hp &lt;= 0 or obj_House.hp &lt;= 0)
            {
                global.state = global.gameOver;
                score = obj_Player.score;
                with(obj_Player) instance_destroy();
                with(obj_House) instance_destroy();
                gameStart = true;
                room_goto(gameover);
                audio_play_sound(snd_Death,1,false);
            }
        }
        
        //Restarting Game
        if(restart)
        {
            room_persistent = false;
            room_restart();
            script_execute(GameInit);
        }
        
        
    }
    else
    {
        cursor_sprite = -1;
        window_set_cursor(cr_default);
    }
    
    //Options
    if(global.state == global.option)
    {
        if(instance_number(obj_Ball) &lt; 2)
        {
            musicBall = instance_create(minSliderX + musicLevel *(maxSliderX-minSliderX),411,obj_Ball);
            soundBall = instance_create(minSliderX + soundLevel *(maxSliderX-minSliderX),501,obj_Ball);
        }
        if(instance_number(obj_Btn) &lt; 2)
        {
            backBtn = instance_create(x,y,obj_Btn);
            backBtn.sprite_index = spr_btnBack;
            
            controlsBtn = instance_create(x,y,obj_Btn);
            controlsBtn.sprite_index = spr_btnControls;
        }
        if(!instance_exists(obj_CheckBox))
            instance_create(560,590,obj_CheckBox);
            
        //if Muted
        if(!mute)
        {
            musicLevel = (musicBall.x - minSliderX)/(maxSliderX-minSliderX);
            soundLevel = (soundBall.x - minSliderX)/(maxSliderX-minSliderX);
        }
        else
        {
            musicLevel = 0;
            soundLevel = 0;
        }
        musicVol(musicLevel);
        soundVol(soundLevel);
        
    }
    
    //Toggling Fullscreen
    /*if(keyboard_check_pressed(vk_f11))
    {
        if(fullscreen)
            fullscreen = false;
        else
            fullscreen = true;
            
        window_set_fullscreen(fullscreen);
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room == mainmenu)
{
    if(!audio_is_playing(snd_MainMenuMusic))
        audio_play_music(snd_MainMenuMusic,true);
        
    if(global.state == -1)
            instance_create(room_width/2,room_height/2,obj_StartUp);
    playbtn = instance_create(x, y, obj_Btn);
    playbtn.sprite_index = spr_btnPlay; 
    high_scoreBtn = instance_create(x, y, obj_Btn);
    high_scoreBtn.sprite_index = spr_btnHighscore;
    optionBtn = instance_create(x, y, obj_Btn);
    optionBtn.sprite_index = spr_btnOptions;
    helpBtn = instance_create(x, y, obj_Btn);
    helpBtn.sprite_index = spr_btnHelp;
    creditBtn = instance_create(x, y, obj_Btn);
    creditBtn.sprite_index = spr_btnCredits;
    quitBtn = instance_create(x, y, obj_Btn);
    quitBtn.sprite_index = spr_btnQuit;
}
if(room == game)
{
    
    if(!instance_exists(obj_House) and !instance_exists(obj_Player) and instance_number(obj_Tree) &lt; 90)
    {
        house = instance_create(room_width/2, room_height/2,obj_House);
        house.image_xscale = scale + 0.25;
        house.image_yscale = scale + 0.25;
        //Creating Player
        player = instance_create(view_xview+view_wview/2, view_yview+view_hview/2,obj_Player);
        player.image_xscale = scale;
        player.image_yscale = scale; 
    
        //Generating Trees   
        for(i=0; i &lt; treeNum; i++)
        {
            rand = random_range(0.25,0.75);
            tree = instance_create(x, y,obj_Tree);
            tree.image_xscale = scale + rand;
            tree.image_yscale = scale + rand;
            if(i&lt;rockNum)
            {
                rand = random_range(-0.25,1);
                rock = instance_create(x,y,obj_Obstacle);
                rock.image_xscale = scale + rand;
                rock.image_yscale = scale + rand;
                rock.image_angle = irandom(360);
            }
            if(i&lt;pondNum)
            {
                rand = random_range(1,2);
                pond = instance_create(x,y,obj_Obstacle);
                pond.sprite_index = spr_Pond;
                pond.image_speed = 1/6;
                pond.image_xscale = scale + rand;
                pond.image_yscale = scale + rand;
            }
        }
        //Top Left
        topLeftSpawn = instance_create(-top * scale,-top * scale,obj_ZombieSpawner);
        //Top Middle
        topMidSpawn = instance_create(room_width/2,-top * scale,obj_ZombieSpawner);
        //Top Right
        topRightSpawn = instance_create(room_width + top * scale,-top * scale,obj_ZombieSpawner);
        //Middle Left
        midLeftSpawn = instance_create(-top * scale,room_height/2,obj_ZombieSpawner);
        //Middle Right
        midRightSpawn = instance_create(room_width + top * scale,room_height/2,obj_ZombieSpawner);
        //Bottom Left
        botLeftSpawn = instance_create(-top * scale,room_height+top * scale,obj_ZombieSpawner);
        //Bottom Middle
        botMidSpawn = instance_create(room_width/2,room_height+top * scale,obj_ZombieSpawner);
        //Bottom Right
        botRightSpawn = instance_create(room_width +top * scale,room_height+top * scale,obj_ZombieSpawner);
                            
        topLeftSpawn.alarm[0] = irandom_range(90,180);
        topMidSpawn.alarm[0] = irandom_range(90,180);
        topRightSpawn.alarm[0] = irandom_range(90,180);
        midLeftSpawn.alarm[0] = irandom_range(90,180);
        midRightSpawn.alarm[0] = irandom_range(90,180);
        botLeftSpawn.alarm[0] = irandom_range(90,180);
        botMidSpawn.alarm[0] = irandom_range(90,180);
        botRightSpawn.alarm[0] = irandom_range(90,180);
        if(zombiesRemaining != zombies)
            zombiesRemaining = zombies;
        
        gameStart = false;
    }
}

//Initialization of Pause Room
if(room == paused)
{
    resumeBtn = instance_create(x,y,obj_Btn);
    resumeBtn.sprite_index = spr_btnResume;
    upgradeBtn = instance_create(x,y,obj_Btn);
    upgradeBtn.sprite_index = spr_btnUpgrades;
    restartBtn = instance_create(x,y,obj_Btn);
    restartBtn.sprite_index = spr_btnRestart;
    mainMenuBtn = instance_create(x,y,obj_Btn);
    mainMenuBtn.sprite_index = spr_btnMainMenu;
}

if(room == gameover)
{
    audio_play_sound(snd_Death, 1, false);
    exitBtn = instance_create(x,y,obj_Btn);
    exitBtn.sprite_index = spr_btnExit;
    enterBtn = instance_create(x,y,obj_Btn);
    enterBtn.sprite_index = spr_btnEnter;
}

if(room == Credits)
    instance_create(room_width/2,room_height,obj_Credits);
    
if(room == Help)
{
    instance_create(room_width/2,room_height/2,obj_Help);
}

    
if(room == upgrades)
{
    btn = instance_create(x,y,obj_Btn);
    btn.sprite_index = spr_btnBack;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.state == global.play)
{
    if(buildMode)
    {
        draw_set_font(HUD_build);
        draw_sprite(spr_HUDBuild,0,960,50);
        draw_text(1630,8,string(supplies));
        //Tile for Turret
        if(supplies &gt;= 20 and instance_number(obj_Turret) &lt; roundNum* 2)
            draw_sprite(spr_TurretTile,0,650,50);
        else
            draw_sprite(spr_TurretTile,1,650,50);
        //Tile for Tower
        if(supplies &gt;= 80 and instance_number(obj_Tower) &lt; roundNum* 2)
            draw_sprite(spr_TowerTile,0,770,50);
        else
            draw_sprite(spr_TowerTile,1,770,50);      
    }
    
    else
    {
        if(instance_exists(obj_Player) and instance_exists(obj_House))
        {
            draw_sprite(spr_HUDBack,0,960,50);
            //arrowBack to Home
            draw_sprite_ext(spr_arrow,0,1720,800,1,1,point_direction(obj_Player.x,obj_Player.y,obj_House.x,obj_House.y),c_white,1);
            draw_sprite(spr_Home,0,1720,800);
            if (zombiesRemaining &lt; 3 and instance_number(obj_Zombie) &gt; 0)
            {
                draw_sprite_ext(spr_arrow,0,960,300,1.5,1.5,point_direction(obj_Player.x,obj_Player.y,obj_Zombie.x,obj_Zombie.y),c_white,1);
                draw_sprite_ext(spr_ZombieSign,0,960,300,1.5,1.5,0,c_white,1);
            }
            
            //Healthbar for Player
            draw_healthbar(145,10,480,40,obj_Player.hp,c_black,c_red,c_red,0,true,true);
            //Healthbar for House
            draw_healthbar(145,60,480,90,obj_House.hp/5,c_black,c_green,c_green,0,true,true);
            //Chosen Gun
            draw_sprite(spr_Gun,obj_Player.gun,790,50);
            
            draw_set_font(HUD);
            draw_set_color(c_white);
            
            //Pecentage of HP of Player
            playerHp = obj_Player.hp/p_maxHp * 100;
            draw_text(300,10,string(playerHp)+"%");
            
            //Percentage of HP of House
            houseHp = obj_House.hp/h_maxHp * 100;
            draw_text(300,60,string(houseHp)+"%");
            
            draw_set_font(HUD_score);
            draw_text(1740,28,string(obj_Player.score));
            draw_text(1480,28,string(roundNum));
            draw_text(1150,2,string(ammo));
            draw_text(1150,54,string(supplies));
            
            draw_sprite(spr_MMBound,0,1590,890);
            
            //Notifications
            //Wave Cleared
            if(alarm[1]&gt;5*60)
            {
                if(num&lt;50)
                    draw_sprite(spr_waveCleared,num,960,540);
                else
                    draw_sprite(spr_waveCleared,49,960,540);
                num++;
            }
            //Wave Starting
            else if(alarm[1]&gt;0)
            {
                draw_sprite(spr_waveStart,real(alarm[1]/60),view_wview[0]/2,top);
                if(alarm[1]%60 == 0)
                    audio_play_sound(snd_Tick,1,false);
            }
            //House Low HP
            if(alarm[2]&gt;60)
            {
                draw_sprite(spr_WarningHouse,0,view_wview[0]/2,top);
                if(!audio_is_playing(snd_Warning))
                    audio_play_sound(snd_Warning,1,false);
            }
            else
                draw_sprite(spr_WarningHouse,1,view_wview[0]/2,top);  
        }
    }
    
    //Loading Screen
    if(alarm[3] &gt; -1)
    {
        if(alarm[3]%6 == 0)
            loadingNum ++;
        if(loadingNum == 11)
            loadingNum = 0;
        
        
        draw_sprite(spr_Loading,loadingNum,view_wview[0]/2,view_hview[0]/2);
        draw_sprite(spr_LoadingRing,alarm[3]%60,400,516);
        draw_sprite(spr_LoadingQoutes,real(alarm[3]/60)%4,view_wview[0]/2,view_hview[0]/2+200);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(obj_Control))
{

    if (global.state == global.high_score)
    {
        draw_sprite(spr_titleHighscore, 0, 480, 0);
        
        initX = 400;
        initOuterX = 1200;
        initY = 370;
        finalY = initY;
        incrementY = 60;
        
        draw_set_font(Highscore_title);
        draw_set_color(c_white);
        draw_text(initX, initY-70, "Name");
        draw_text(initOuterX, initY-70, "Score");
        
        draw_set_font(Highscore_value);
        
        for (i = 0; i &lt; players; i++)
        {
            draw_text(initX, finalY, hsName[i]);
            draw_text(initOuterX, finalY, hsTotalScore[i]);
            
            finalY += incrementY;
        }
        
        if (finalY == initY)
        {
            draw_set_font(Highscore_title);
            draw_set_color(c_red);
            draw_text(room_width/2 - string_width("No High Scores!")/2, room_height/2, "No High Scores!");
        }
        
        else
        {
            draw_set_color(c_red);
            draw_rectangle(initX, room_height - 380, 1450, room_height-110,3);
            
            draw_set_color(c_white);
            
            if (mouse_check_button_released(mb_left))
            {
                if (mouse_x &gt; initX &amp;&amp; mouse_x &lt; initOuterX)
                {
                    hsClickX = true;
                }
                
                else
                {
                    hsClickX = false;
                }
                
                if (mouse_y &gt; initY &amp;&amp; mouse_y &lt; finalY)
                {
                    mouseY = mouse_y;
                    hsClickY = true;
                }
                
                else
                {
                    hsClickY = false;
                }
            }
            
            if (hsClickX &amp;&amp; hsClickY)
            {
                hsIndex = real(string_char_at(string(((mouseY - initY)/incrementY)), 0));
                
                draw_text(initX + 10, room_height - 370, "Days: ");
                draw_text(initX + 10, room_height - 310, "Buildings built: ");
                draw_text(initX + 10, room_height - 250, "Zombies killed: ");
                draw_text(initX + 10, room_height - 190, "Accuracy: ");
                
                draw_set_color(c_red);
                draw_text(initX, initY + (hsIndex*incrementY), hsName[hsIndex]);
                draw_text(initX + 10 + string_width("Days: "), room_height - 370, hsDays[hsIndex]);
                draw_text(initX + 10 + string_width("Buildings built: "), room_height - 310, hsBuildings[hsIndex]);
                draw_text(initX + 10 + string_width("Zombies killed: "), room_height - 250, hsZombiesKilled[hsIndex]);
                draw_text(initX + 10 + string_width("Accuracy: "), room_height - 190, string(hsAccuracy[hsIndex])+"%");
            }
        }
    }
    
    if (global.state == global.keybind)
    {
        initX = 400;
        initOuterX = 1200;
        initY = 370;
        finalY = initY;
        incrementY = 60;
        
        draw_set_font(Highscore_title);
        draw_set_color(c_white);
        
        draw_text(initX, initY-70, "Name");
        draw_text(initOuterX, initY-70, "Value");
        
        draw_set_font(Highscore_value);
        
        for (i=0; i&lt;8; i++)
        {
            draw_text(initX, finalY, arrControlName[i]);
            if (i != conSelected)
            {
                if (arrTempKeys[i] != "N/A")
                    draw_text(initOuterX, finalY, arrTempKeys[i]);
                else
                {
                    draw_set_color(c_gray);
                    draw_text(initOuterX, finalY, arrTempKeys[i]);
                    
                    draw_set_color(c_white);
                }
            }
            finalY += incrementY;
        }
        
        backBtn = instance_create(x, y, obj_Btn);
        backBtn.sprite_index = spr_btnBack;
        
        saveBtn = instance_create(x, y, obj_Btn);
        saveBtn.sprite_index = spr_btnSave;
        
        if (mouse_check_button_released(mb_left))
        {
            if (mouse_x &gt; initX &amp;&amp; mouse_x &lt; initOuterX)
            {
                conClickX = true;
            }
            else
            {
                conClickX = false;
                conSelected = -1;
            }
            
            if (mouse_y &gt; initY &amp;&amp; mouse_y &lt; finalY)
            {
                conClickY = true;
                mouseY = mouse_y;
            }
            else
            {
                conClickY = false;
                conSelected = -1;
            }
        }
        
        if (conClickX &amp;&amp; conClickY)
        {
            conIndex = real(string_char_at(string(((mouseY - initY)/incrementY)), 0));
            conSelected = conIndex;
            
            draw_set_color(c_red);
            draw_text(initX, initY + conIndex*incrementY, arrControlName[conIndex]);
            draw_text(initOuterX, initY + conIndex*incrementY, "Press any key");
            
            if (keyboard_check(vk_anykey))
            {
                arrTempKeys[conIndex] = string_upper(keyboard_lastchar);
                conSelected = -1;
                conClickX = false;
                conClickY = false;
                    
                for (i = 0; i &lt; 8; i++)
                {
                    if (i != conIndex)
                    {
                        if (arrTempKeys[i] == arrTempKeys[conIndex])
                        {
                            arrTempKeys[i] = "N/A";
                        }
                    }
                }
            }
        }
    }
    
    if (global.state == global.upgrade)
    {
        initX = 400;
        initOuterX = 1400;
        initY = 370;
        finalY = 370;
        incrementY = 60;
        
        count = 0;
    
        draw_set_font(Highscore_title);
        draw_set_color(c_white);
        
        draw_text(initX, 300, string("Base Upgrades"));
        draw_text(initOuterX - 200, 300, string("Percentage"));
        
        draw_set_font(Highscore_value);
        
        offsetX = sprite_width+50;
        
        if (up01Name != "")
        {
            draw_text(initX, finalY, up01Name);
            draw_text(initOuterX, finalY, string(up01Stats) + "%");
            
            if (up01lvl != up01Levels+1)
            {
                if (instance_number(obj_BtnLvlup) &lt; upBtnCount)
                {
                    btn01 = instance_create(initX-offsetX, finalY+10, obj_BtnLvlup);
                }
            }
            
            upgradeArr[count] = "UP01";
            
            finalY += incrementY;
            count++;
        }
        
        if (up02Name != "")
        {
            draw_text(initX, finalY, up02Name);
            draw_text(initOuterX, finalY, string(up02Stats) + "%");
            
            if (up02lvl != up02Levels+1)
            {
                if (instance_number(obj_BtnLvlup) &lt; upBtnCount)
                    btn02 = instance_create(initX-offsetX, finalY+10, obj_BtnLvlup);
                
            }
            
            upgradeArr[count] = "UP02";
            
            finalY += incrementY;
            count++;
        }
        
        if (up03Name != "")
        {
            draw_text(initX, finalY, up03Name);
            draw_text(initOuterX, finalY,string(up03Stats) + "%");
            
            if (up03lvl != up03Levels+1)
            {
                if (instance_number(obj_BtnLvlup) &lt; upBtnCount)
                    btn03 = instance_create(initX-offsetX, finalY+10, obj_BtnLvlup);
                
            }
            
            upgradeArr[count] = "UP03";
            
            finalY += incrementY;
            count++;
        }
        
        if (up04Name != "")
        {
            draw_text(initX, finalY, up04Name);
            draw_text(initOuterX, finalY, string(up04Stats) + "%");
            
            if (up04lvl != up04Levels+1)
            {
                if (instance_number(obj_BtnLvlup) &lt; upBtnCount)
                    btn04 = instance_create(initX-offsetX, finalY+10, obj_BtnLvlup);
                
            }
            upgradeArr[count] = "UP04";
            
            finalY += incrementY;
            count++;
        }
        
        draw_text(1200,room_height-425,"Supplies: " + string(supplies));
        
        draw_set_color(c_red);
        draw_rectangle(initX, room_height - 350, 1700, room_height-50,3);
        
        //test for mouse clicks
        if (mouse_check_button_released(mb_left))
        {
            if (mouse_x &lt; initOuterX &amp;&amp; mouse_x &gt; initX-110)
            {
                upClickX = true;
            }
            
            else
            {
                upClickX = false;
            }
            
            if (mouse_y &gt; initY &amp;&amp; mouse_y &lt; finalY)
            {
                upClickY = true;
                mouseY = mouse_y;
            }
            
            else
            {
                upClickY = false;
            }
        }
        
        if (upClickX &amp;&amp; upClickY)
        {
            upIndex = real(string_char_at(string(((mouseY - initY)/incrementY)), 0));
                    
            draw_set_color(c_red);
            str_stats = "";
                    
            switch (upgradeArr[upIndex])
            {
                case "UP01": 
                    draw_text(initX, initY + upIndex*incrementY, up01Name);
                    
                    draw_set_color(c_white);
                    draw_text(420, room_height - 330, up01Des);
                    
                    if (up01lvl == up01Levels+1)
                    {
                        draw_text(420, room_height-250, "Current Level: MAX");
                    }
                    
                    else
                    {
                        draw_text(420, room_height-220, "Current Level: ");
                        draw_set_color(c_red);
                        draw_text(420 + string_width("Current Level: "), room_height - 220, string(up01lvl));
                        
                        draw_set_color(c_white);
                        draw_text(420, room_height - 150, "Supplies to upgrade: ");
                        draw_set_color(c_red);
                        draw_text(420 + string_width("Supplies to upgrade: "), room_height - 150, string(up01Cost[up01lvl-1]));
                        
                        draw_set_color(c_white);
                        draw_text(420 + string_width("Supplies to upgrade: ") + string_width(string(up01Cost[up01lvl-1])), room_height - 150, "  Increased by: ");
                        draw_set_color(c_red);
                        draw_text(420 + string_width("Supplies to upgrade: ") + string_width(string(up01Cost[up01lvl-1])) + string_width("  Increased by: "), room_height - 150, string(up01Values[up01lvl-1])+"%");
                    }
                    
                    break;
                case "UP02": 
                    draw_text(initX, initY + upIndex*incrementY, up02Name);
                    
                    draw_set_color(c_white);
                    draw_text(420, room_height - 330, up02Des);
                    draw_text(420, room_height - 250, "");
                    
                    if (up02lvl == up02Levels+1)
                    {
                        draw_text(420, room_height-250, "Current Level: MAX");
                    }
                    
                    else
                    {
                        draw_text(420, room_height-220, "Current Level: ");
                        draw_set_color(c_red);
                        draw_text(420 + string_width("Current Level: "), room_height - 220, string(up02lvl));
                        
                        draw_set_color(c_white);
                        draw_text(420, room_height - 150, "Supplies to upgrade: ");
                        draw_set_color(c_red);
                        draw_text(420 + string_width("Supplies to upgrade: "), room_height - 150, string(up02Cost[up02lvl-1]));
                        
                        draw_set_color(c_white);
                        draw_text(420 + string_width("Supplies to upgrade: ") + string_width(string(up02Cost[up02lvl-1])), room_height - 150, "  Increased by: ");
                        draw_set_color(c_red);
                        draw_text(420 + string_width("Supplies to upgrade: ") + string_width(string(up02Cost[up02lvl-1])) + string_width("  Increased by: "), room_height - 150, string(up02Values[up02lvl-1])+"%");
                    }
                    
                    break;
                case "UP03": 
                    draw_text(initX, initY + upIndex*incrementY, up03Name);
                    
                    draw_set_color(c_white);
                    draw_text(420, room_height - 330, up03Des);
                    draw_text(420, room_height - 250, "");
                    
                    if (up03lvl == up03Levels+1)
                    {
                        draw_text(420, room_height-250, "Current Level: MAX");
                    }
                    
                    else
                    {
                        draw_text(420, room_height-220, "Current Level: ");
                        draw_set_color(c_red);
                        draw_text(420 + string_width("Current Level: "), room_height - 220, string(up03lvl));
                        
                        draw_set_color(c_white);
                        draw_text(420, room_height - 150, "Supplies to upgrade: ");
                        draw_set_color(c_red);
                        draw_text(420 + string_width("Supplies to upgrade: "), room_height - 150, string(up03Cost[up03lvl-1]));
                        
                        draw_set_color(c_white);
                        draw_text(420 + string_width("Supplies to upgrade: ") + string_width(string(up03Cost[up03lvl-1])), room_height - 150, "  Increased by: ");
                        draw_set_color(c_red);
                        draw_text(420 + string_width("Supplies to upgrade: ") + string_width(string(up03Cost[up03lvl-1])) + string_width("  Increased by: "), room_height - 150, string(up03Values[up03lvl-1])+"%");
                    }
                    
                    break;
                case "UP04": 
                    draw_text(initX, initY + upIndex*incrementY, up04Name);
                    
                    draw_set_color(c_white);
                    draw_text(420, room_height - 330, up04Des);
                    draw_text(420, room_height - 250, "");
                    
                    if (up04lvl == up04Levels+1)
                    {
                        draw_text(420, room_height-250, "Current Level: MAX");
                    }
                    
                    else
                    {
                        draw_text(420, room_height-220, "Current Level: ");
                        draw_set_color(c_red);
                        draw_text(420 + string_width("Current Level: "), room_height - 220, string(up04lvl));
                        
                        draw_set_color(c_white);
                        draw_text(420, room_height - 150, "Supplies to upgrade: ");
                        draw_set_color(c_red);
                        draw_text(420 + string_width("Supplies to upgrade: "), room_height - 150, string(up04Cost[up04lvl-1]));
                        
                        draw_set_color(c_white);
                        draw_text(420 + string_width("Supplies to upgrade: ") + string_width(string(up04Cost[up04lvl-1])), room_height - 150, "  Increased by: ");
                        draw_set_color(c_red);
                        draw_text(420 + string_width("Supplies to upgrade: ") + string_width(string(up04Cost[up04lvl-1])) + string_width("  Increased by: "), room_height - 150, string(up04Values[up04lvl-1])+"%");
                    }
                    
                    break;
           }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!loading)
{
    if(global.state == global.play)
    {
        global.state = global.pause;
        p_alarm1 = alarm[1];
        audio_pause_music();
        room_goto(paused);
    }
    else if(global.state == global.pause)
    {
        global.state = global.play;
        alarm[1] = p_alarm1;
        audio_resume_music();
        room_goto(game);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
