<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
image_index = 1;
shoot = true;
flash = false;
hMov = false; //Horizontal Movement 
vMov = false; //Vertical Movement

//Player Stats
hp = obj_Control.p_maxHp;
gun = 0;        //0: pistol 1:machine gun 2: shot gun
score = 0;



/*
To calculate the distance between the origin of the sprite
and tip of the gun. 22 is the difference between the height
of the gun and the centre of sprite.
*/
tipDistance = point_distance(x,y,x+(sprite_height/2),y+(22*image_yscale));
tipAngle = point_direction(x,y,x+(sprite_height/2),y+(22*image_yscale));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>flash = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_Player</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!obj_Control.buildMode and !obj_Control.loading)
{
    //Make the image follow the mouse
    image_angle = point_direction(x,y,mouse_x,mouse_y);
    direction = image_angle;//Direction the object moves 
    
    gunTipX = x+lengthdir_x((sprite_width/2)*image_xscale,image_angle+point_direction(x,y,x+sprite_width/2,y+(22*image_yscale)));
    gunTipY = y+lengthdir_y((sprite_width/2)*image_yscale,image_angle+point_direction(x,y,x+sprite_width/2,y+(22*image_yscale)));
    
    /*Movement is changed from directional-based
      to North South East West */
    
    //Movement
    if(y&gt;=100+sprite_height/2 and y&lt;=room_height - sprite_height/2)
    {
        if(keyboard_check(ord(obj_Control.conFront)) or keyboard_check(vk_up))
        {
            move_contact_all(90,obj_Control.spd);
            gunTipY = y+lengthdir_y(obj_Control.spd,direction)+lengthdir_y((sprite_width/2)*image_yscale,image_angle+point_direction(x,y,x+sprite_width/2,y+(22*image_yscale)));
            vMov = true;
            
        }
        else if(keyboard_check(ord(obj_Control.conBack)) or keyboard_check(vk_down))
        {
            move_contact_all(270,obj_Control.spd);
            gunTipY = y-lengthdir_y(obj_Control.spd,direction)+lengthdir_y((sprite_width/2)*image_yscale,image_angle+point_direction(x,y,x+sprite_width/2,y+(22*image_yscale)));
            vMov = true;
        }
        else
        {
            vMov = false;
        }
    }
    else if(y&lt;100+sprite_height/2)
        y =100+sprite_height/2;
    else if(y&gt;room_height - sprite_height/2)
        y = room_height - sprite_height/2
    
    if(x &gt;= sprite_width/2 and x &lt;= room_width - sprite_width/2)
    {
        if(keyboard_check(ord(obj_Control.conLeft)) or keyboard_check(vk_left))
        {
            move_contact_all(180,obj_Control.spd);
            gunTipX = x+lengthdir_x(obj_Control.spd,direction) +lengthdir_x((sprite_width/2)*image_xscale,image_angle+point_direction(x,y,x+sprite_width/2,y+(22*image_yscale)));
            hMov = true;
        }
        else if(keyboard_check((ord(obj_Control.conRight))) or keyboard_check(vk_right))
        {
            move_contact_all(0,obj_Control.spd);
            gunTipX = x-lengthdir_x(obj_Control.spd,direction) +lengthdir_x((sprite_width/2)*image_xscale,image_angle+point_direction(x,y,x+sprite_width/2,y+(22*image_yscale)));
            hMov = true;
        }
        else
        {
            hMov = false;
        }
    }
    else if(x &lt; sprite_width/2)
        x = sprite_width/2;
    else if(x &gt; room_width - sprite_width/2)
        x = room_width - sprite_width/2;
    
    if(hMov or vMov)
    {
        if(!audio_is_playing(snd_Movement))
        {
            audio_play_sound(snd_Movement,1,false);
        }
        image_speed = 0.2;
    }
    else
    {
        audio_stop_sound(snd_Movement);
        image_speed = 0;
    }
        
    
    //Toggling Weapons
    if(mouse_wheel_up())
    {
        audio_play_sound(snd_WeaponChange,1,false);
        if(gun==2)
            gun=0;
        else
            gun += 1;
    }
    if(mouse_wheel_down())
    {
        audio_play_sound(snd_WeaponChange,1,false);
        if(gun==0)
            gun=2;
        else
            gun -=1;
    }
    if(keyboard_check_pressed(ord(obj_Control.conGun1)))
    {
        gun = 0;
        audio_play_sound(snd_WeaponChange,1,false);
    }
    if(keyboard_check_pressed(ord(obj_Control.conGun2)))
    {
        audio_play_sound(snd_WeaponChange,1,false);
        gun = 1;
    }
    if(keyboard_check_pressed(ord(obj_Control.conGun3)))
    {
        gun = 2;
        audio_play_sound(snd_WeaponChange,1,false);
    }
    
        
    //Shooting
    if (shoot and mouse_check_button(mb_left))
    {     
        //Pistol Code
        if((gun == 0) or (gun == 1 and obj_Control.ammo &gt;0) or (gun== 2 and obj_Control.ammo &gt;= 3))
        {
            //Bullet from centre applies for all guns
            bullet = instance_create(gunTipX,gunTipY,obj_Bullet)
            bullet.direction = direction + irandom_range(-obj_Control.accuracy, obj_Control.accuracy);
            bullet.image_angle = bullet.direction;
            bullet.image_xscale = image_xscale;
            bullet.image_yscale = image_yscale;
            bullet.speed = 20;
            
            if(gun == 0)
            {
                audio_play_sound(snd_Pistol,1,false);
                bullet.alarm[0] = 30;
                bullet.dmg = obj_Control.gun1_dmg;
                alarm[0] = 30;
                
                obj_Control.shots_fired++;
            }
            else if(gun == 1)
            {    
                audio_play_sound(snd_M4A1,1,false);
                bullet.alarm[0] = 40;
                bullet.dmg = obj_Control.gun2_dmg;
                alarm[0] = 10;
                obj_Control.ammo -= 1;
                
                obj_Control.shots_fired++;
            }
            else if(gun == 2)
            {   
                audio_play_sound(snd_Shotgun,1,false);
                
                bullet.alarm[0] = 30;
                bullet.dmg = obj_Control.gun3_dmg;
                    
                //Left Bullet for shotgun
                bullet2 = instance_create(gunTipX,gunTipY,obj_Bullet)
                bullet2.direction = direction-10+ irandom_range(-obj_Control.accuracy, obj_Control.accuracy);
                bullet2.image_angle = bullet.direction;
                bullet2.image_xscale = image_xscale;
                bullet2.image_yscale = image_yscale;
                bullet2.speed = 20;
                bullet2.alarm[0] = 30;
                bullet2.dmg = obj_Control.gun3_dmg;
                    
                //Right Bullet for shotgun
                bullet3 = instance_create(gunTipX,gunTipY,obj_Bullet)
                bullet3.direction = direction+10 + irandom_range(-obj_Control.accuracy, obj_Control.accuracy);
                bullet3.image_angle = bullet.direction;
                bullet3.image_xscale = image_xscale;
                bullet3.image_yscale = image_yscale;
                bullet3.speed = 20;
                bullet3.alarm[0] = 30;
                bullet3.dmg = obj_Control.gun3_dmg;
                alarm[0] = 30;
                    
                obj_Control.ammo -= 3;
                obj_Control.shots_fired+=3;
             }
             shoot = false;
             //Muzzle Flash Timer
            flash = true;
            alarm[1] = 5;
        }
        else
        {
            if(!audio_is_playing(snd_NoBullets))
            {
                audio_play_sound(snd_NoBullets,1,false);
            }
        }
    }
}
else
    image_speed = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Building">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_outside_all(point_direction(x,y,other.x,other.y)-180,obj_Control.spd);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_House">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_outside_all(point_direction(x,y,other.x,other.y)-180,obj_Control.spd);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Obstacle">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_outside_all(point_direction(x,y,other.x,other.y)-180,obj_Control.spd);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if(flash)
    draw_sprite_ext(spr_MuzzleFlash,0,gunTipX,gunTipY,obj_Control.scale,obj_Control.scale,direction,c_white,image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>100,100</point>
  </PhysicsShapePoints>
</object>
