<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Zombie</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>givDmg = true;
collide = false;
move = true;
active = true;
wander = true;
load = false;
stuck = false;
alarm[2] = obj_Control.wanderTime; //After 20 Seconds of wandering go to house if still far
target = -1; //0 :Random,1: building, 2:House, 3:Player
randomX = random(room_width);
randomY = random(room_height);
alarm[3] = 4* 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>wander = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomX = irandom(room_width);
randomY = irandom(room_height);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Used to time the damage given by the zombie
collide = false;
move = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!load)
{
    switch(image_index)
    {
        //Normal Zombie
        case 0:
        spd = 3 + (obj_Control.roundNum-1)/4;
        dmg = 3 + (obj_Control.roundNum-1)/2;
        hp = 200 + 15*(obj_Control.roundNum-1);
        maxHp = 200 + 30*(obj_Control.roundNum-1);
        image_speed = 0;
        scale = obj_Control.scale*(0.75 + obj_Control.roundNum/10);
        break;
        
        //Sprinter Zombie
        case 1:
        spd = 4 + (obj_Control.roundNum-1)/4;
        dmg = 2 + (obj_Control.roundNum-1)/2;
        hp = 150 + 15*(obj_Control.roundNum-1);
        maxHp =150 + 15*(obj_Control.roundNum-1);
        image_speed = 0;
        scale = obj_Control.scale*(0.5 + obj_Control.roundNum/10);
        break;
        
        //Tank Zombie
        case 2:
        spd = 2 + (obj_Control.roundNum-1)/4;
        dmg = 15 + (obj_Control.roundNum-1)/2;
        hp = 600 + 50*(obj_Control.roundNum-1);
        maxHp =600 + 50*(obj_Control.roundNum-1);
        image_speed = 0;
        scale = obj_Control.scale*(1.25 + obj_Control.roundNum/10);
        break;
    }
    load = true;
}
image_xscale = scale;
image_yscale = scale;

if(active)
{          
    if(move)
    { 
        if(alarm[0]&lt;= 0 and target == 3 and distance_to_object(obj_Player) &lt;= sprite_height*image_yscale)
        {
            obj_Control.hp_loss += dmg;
            obj_Player.hp -= dmg;
            alarm[0] = 60;
            collide = true;
        }
        if(alarm[0]&lt;= 0 and distance_to_object(obj_House) &lt;= sprite_height * image_yscale and (target==2 or (distance_to_object(obj_House)&lt;= sprite_height*image_yscale )))
        {
            obj_House.hp -= dmg/2;
            obj_House.attacked = true;
            obj_House.alarm[0] = 10*60;
            alarm[0] = 60;
            collide = true;
        }
        if(alarm[0]&lt;= 0 and distance_to_object(instance_nearest(x,y,obj_Building)) &lt; sprite_height * image_yscale and (target == 1 or (distance_to_object(instance_nearest(x,y,obj_Building)) &lt;= distance_to_object(obj_Player) and target == 3)))
        {
            (instance_nearest(x,y,obj_Building)).hp -= dmg;
            alarm[0] = 60;
            collide = true;
        }
        
        if((x!=xprevious and y!=yprevious))
            phase = true; 
        else
            phase = false;
            
        if(distance_to_object(obj_Player) &lt;= obj_Control.zombiePRadius)
        {
            image_angle = point_direction(x,y,obj_Player.x,obj_Player.y);
            mp_potential_step(obj_Player.x,obj_Player.y,spd,phase);
            target = 3;
        }
        else
        {
            if(instance_exists(obj_Building))
            {
                image_angle = point_direction(x,y,obj_Building.x,obj_Building.y);
                mp_potential_step(obj_Building.x,obj_Building.y,spd,phase);
                target = 1;
            }
            //Home to the House, if close or if wandering too long
            else if(distance_to_object(obj_House)&lt;= obj_Control.zombieHRadius or wander==false)
            {
                image_angle = point_direction(x,y,obj_House.x,obj_House.y);
                mp_potential_step(obj_House.x,obj_House.y,spd,phase);
                target = 2;
            }
            //Wander Aimlessly
            else
            {
                    image_angle = point_direction(x,y,randomX,randomY);
                    mp_potential_step(randomX,randomY,spd-2,phase);
                    if(alarm[1]&lt;=0)
                        alarm[1] = irandom_range(3*60,5*60);
                    target = 0;
            }
        }
        
    }
    
    if(hp &lt;= 0)
    {
        obj_Control.zombies_killed++;
        if(image_index == 0)
            obj_Player.score += 10;
        else if(image_index == 1)
            obj_Player.score += 20;
        else
            obj_Player.score += 40;
        obj_Control.zombiesRemaining -= 1;
        audio_play_sound(snd_ZombieDie,1,false);
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Crate">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>zombieCollision(other);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Building">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>zombieCollision(other);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_House">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>zombieCollision(other);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Obstacle">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>zombieCollision(other);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Zombie">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>zombieCollision(other);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_contact_solid(other.direction,10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>zombieCollision(obj_Player);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_healthbar(x-sprite_width/2,y-sprite_height/2,x+sprite_width/2,y-sprite_height/2+35*image_yscale,hp/maxHp*100,c_black,c_red,c_green,0,true,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>100,100</point>
    <point>100,100</point>
  </PhysicsShapePoints>
</object>
